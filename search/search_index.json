{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Course overview \u00b6 For the requirements please visit the official data sheet . Schedule \u00b6 TBD: Microsoft SQL Server Reporting Services completed with the help of the instructor in university lab submission deadline: TBD TBD: Query optimization completed with the help of the instructor in university lab submission deadline: TBD TBD: Microsoft SQL Server programming homework submission deadline: TBD TDB: MongoDB homework submission deadline: TBD TBD: Entity Framework and REST API homework submission deadline: TBD Submitting the solutions \u00b6 Each lab must be submitted in a personal git repository. Please refer to the detailed guideline here . You must carefully study these guidelines! IMPORTANT You will be walked through the process during the first lab. The submissions of the lab exercises must follow these guidelines. Submissions not following these guidelines are not graded. Screenshots \u00b6 Some of the exercises require you to create a screenshot. This screenshot is the proof of completion of the exercise. The expected content of these screenshots is detailed in the exercise description. The screenshot may include the entire desktop, or just the required portion of the screen. The screenshots must be submitted as part of the solution code, uploaded to the git repository. The repositories are private; only you and the instructions can access them. If there is any content on the screenshot that is not relevant to the exercise and you would like to remove, you can obscure these parts. Grading \u00b6 You can earn 20+3 points for each lab. The +3 is an extra, optional task. You must submit each lab until the deadline. For a successful completion you must get at least 8 points. Grading, based on the points, is as follows: 0-7.5 point: failed 8-10.5 point: pass 11-13.5 point: satisfactory 14-16.5 point: good 17-20+ points: very good The extra +3 points are optional; if you do them, it is added to the points. In the automated evaluation this extra 3 points will appear as \"imsc\"; please ignore this (that is for the Hungarian students). The final grade will be the mathematically correct average of the individual grades. If you do not attend a lab, or do not submit it until the deadline, it will be counted as grade 1 in the average. Some of the exercises are evaluated automatically . Your code will be executed, therefore it is important that you follow the exercise descriptions precisely (e.g. use the provided code skeleton, change only the allowed parts of the code, etc). You will receive a preliminary result about your submission in GitHub; see in the guideline here ). If there are some issues you need to diagnose, the entire log of the execution is available for you on the GitHub Actions web page. A short introduction is provided here . Our expectations regarding the labs \u00b6 Where should I upload the solution? See above. Individual work at home? Since your work is graded, you are expected to submit your own solution. This does not mean that you cannot ask or give help to others. But it prohibits submitting a work created by someone else. This is the reason we ask for screenshots: these verify the process of completing the exercises. Submitting the work of someone else: Refer to the Ethical codex and the Code of Studies. One lab is just 4 hours, right? No. This course is 3 credits, which (officially) translates to approx. 90 hours of work invested throughout the semester. The lab is not just the 4 hours you spend with the instructor; it also involves preliminary preparation and the finishing / completion of the tasks at home. My code contains a small typo and I received no grade. You are expected to write code that actually works! You are completing the exercises in front of a computer, so you have everything you need to check yourself. Your code must compile and must run. If the behavior is not entirely correct, that is accepted. But if it does not even compile, it will not be graded. Just imagine what would you happen if you committed code that does not compile at your workplace? If I am working at home, how do I get help? Talk to your lab instructor. The instructor does not help. Why? You might not be given the right solution if you face a problem. But this does not mean, you get no help. You are encouraged to investigate your problems, search for solutions, and ask specific issues. You must demonstrate that you are a professional! How should I ask questions then? In short: https://stackoverflow.com/help/how-to-ask . In more details: If you are stuck, first, make an effort to understand your problem. The problem is not that \"it does not work\", or \"I don't know how to do it.\" You can ask good questions once you understand the problem and have tested some solutions already. So the answer is Google and StackOverflow? No. Everything you need here, you should already know. Google is a fine tool, StackOverflow is even better... However... You also need to understand the answer you find here. The answer you find here might be a solution to some problem, but not necessarily to your problem. All these deadlines and rules! A software developer, better yet, an engineer must be prepared not only to write code, but to work within the scope of prescribed rules. The world is complex, and complexity is often managed with rules. If you have some time, check what Robert C. Martin (Bob Martin, \"Uncle Bob\") has to say about the origins of the software developer profession: https://www.youtube.com/watch?v=ecIWPzGEbFc License The materials provided here are created for the students of course BMEVIAUAC09. The usage of these materials outside the scope of teaching or learning this particular course is only granted if the source and authors are contributed. These materials are to be viewed within the context of the course. For any other usage scenarios the material is provided as-is.","title":"Course overview"},{"location":"#course-overview","text":"For the requirements please visit the official data sheet .","title":"Course overview"},{"location":"#schedule","text":"TBD: Microsoft SQL Server Reporting Services completed with the help of the instructor in university lab submission deadline: TBD TBD: Query optimization completed with the help of the instructor in university lab submission deadline: TBD TBD: Microsoft SQL Server programming homework submission deadline: TBD TDB: MongoDB homework submission deadline: TBD TBD: Entity Framework and REST API homework submission deadline: TBD","title":"Schedule"},{"location":"#submitting-the-solutions","text":"Each lab must be submitted in a personal git repository. Please refer to the detailed guideline here . You must carefully study these guidelines! IMPORTANT You will be walked through the process during the first lab. The submissions of the lab exercises must follow these guidelines. Submissions not following these guidelines are not graded.","title":"Submitting the solutions"},{"location":"#screenshots","text":"Some of the exercises require you to create a screenshot. This screenshot is the proof of completion of the exercise. The expected content of these screenshots is detailed in the exercise description. The screenshot may include the entire desktop, or just the required portion of the screen. The screenshots must be submitted as part of the solution code, uploaded to the git repository. The repositories are private; only you and the instructions can access them. If there is any content on the screenshot that is not relevant to the exercise and you would like to remove, you can obscure these parts.","title":"Screenshots"},{"location":"#grading","text":"You can earn 20+3 points for each lab. The +3 is an extra, optional task. You must submit each lab until the deadline. For a successful completion you must get at least 8 points. Grading, based on the points, is as follows: 0-7.5 point: failed 8-10.5 point: pass 11-13.5 point: satisfactory 14-16.5 point: good 17-20+ points: very good The extra +3 points are optional; if you do them, it is added to the points. In the automated evaluation this extra 3 points will appear as \"imsc\"; please ignore this (that is for the Hungarian students). The final grade will be the mathematically correct average of the individual grades. If you do not attend a lab, or do not submit it until the deadline, it will be counted as grade 1 in the average. Some of the exercises are evaluated automatically . Your code will be executed, therefore it is important that you follow the exercise descriptions precisely (e.g. use the provided code skeleton, change only the allowed parts of the code, etc). You will receive a preliminary result about your submission in GitHub; see in the guideline here ). If there are some issues you need to diagnose, the entire log of the execution is available for you on the GitHub Actions web page. A short introduction is provided here .","title":"Grading"},{"location":"#our-expectations-regarding-the-labs","text":"Where should I upload the solution? See above. Individual work at home? Since your work is graded, you are expected to submit your own solution. This does not mean that you cannot ask or give help to others. But it prohibits submitting a work created by someone else. This is the reason we ask for screenshots: these verify the process of completing the exercises. Submitting the work of someone else: Refer to the Ethical codex and the Code of Studies. One lab is just 4 hours, right? No. This course is 3 credits, which (officially) translates to approx. 90 hours of work invested throughout the semester. The lab is not just the 4 hours you spend with the instructor; it also involves preliminary preparation and the finishing / completion of the tasks at home. My code contains a small typo and I received no grade. You are expected to write code that actually works! You are completing the exercises in front of a computer, so you have everything you need to check yourself. Your code must compile and must run. If the behavior is not entirely correct, that is accepted. But if it does not even compile, it will not be graded. Just imagine what would you happen if you committed code that does not compile at your workplace? If I am working at home, how do I get help? Talk to your lab instructor. The instructor does not help. Why? You might not be given the right solution if you face a problem. But this does not mean, you get no help. You are encouraged to investigate your problems, search for solutions, and ask specific issues. You must demonstrate that you are a professional! How should I ask questions then? In short: https://stackoverflow.com/help/how-to-ask . In more details: If you are stuck, first, make an effort to understand your problem. The problem is not that \"it does not work\", or \"I don't know how to do it.\" You can ask good questions once you understand the problem and have tested some solutions already. So the answer is Google and StackOverflow? No. Everything you need here, you should already know. Google is a fine tool, StackOverflow is even better... However... You also need to understand the answer you find here. The answer you find here might be a solution to some problem, but not necessarily to your problem. All these deadlines and rules! A software developer, better yet, an engineer must be prepared not only to write code, but to work within the scope of prescribed rules. The world is complex, and complexity is often managed with rules. If you have some time, check what Robert C. Martin (Bob Martin, \"Uncle Bob\") has to say about the origins of the software developer profession: https://www.youtube.com/watch?v=ecIWPzGEbFc License The materials provided here are created for the students of course BMEVIAUAC09. The usage of these materials outside the scope of teaching or learning this particular course is only granted if the source and authors are contributed. These materials are to be viewed within the context of the course. For any other usage scenarios the material is provided as-is.","title":"Our expectations regarding the labs"},{"location":"FAQ/","text":"Typical issues \u00b6 If you run into some problems, check the list below for guidance. Cannot find your repository \u00b6 Go to www.github.com , log in, then you will see your repositories on the left. \"Run failed\" or \"checks have failed\" \u00b6 After a commit some checks are evaluated. This message notifies you that something failed. You must fix this. If you received an email, it will contain a link to \"View results.\" If you are checking the pull request, look for the \"Details\" link. Here, you see the process of evaluation. Look for the failed step with red X and check the errors. \"Starting your workflow\" \u00b6 If you see this in GitHub Actions, it means, the evaluation has not started yet, but GitHub knows it has a job to do. Wait until the evaluation begins. You don't know what the error is \u00b6 It it not the purpose of the automated evaluation to pinpoint the error precisely. It is part of the software developers job to test your solution. The evaluation will tell you a general direction, but it will not identify the problem. The error messages may come from the actual execution of your code, so it might include the database server error, or the C# compiler error. This is the same level of feedback you would get in your own environment. You don't know the GitHub name of your instructor \u00b6 The instructor should have told you this. If in doubt, assign to akosdudas . You prepared your solution, but received no grade/points \u00b6 Did you commit? And push? Do you have a pull request? Assigned to the instructor?","title":"Typical issues"},{"location":"FAQ/#typical-issues","text":"If you run into some problems, check the list below for guidance.","title":"Typical issues"},{"location":"FAQ/#cannot-find-your-repository","text":"Go to www.github.com , log in, then you will see your repositories on the left.","title":"Cannot find your repository"},{"location":"FAQ/#run-failed-or-checks-have-failed","text":"After a commit some checks are evaluated. This message notifies you that something failed. You must fix this. If you received an email, it will contain a link to \"View results.\" If you are checking the pull request, look for the \"Details\" link. Here, you see the process of evaluation. Look for the failed step with red X and check the errors.","title":"\"Run failed\" or \"checks have failed\""},{"location":"FAQ/#starting-your-workflow","text":"If you see this in GitHub Actions, it means, the evaluation has not started yet, but GitHub knows it has a job to do. Wait until the evaluation begins.","title":"\"Starting your workflow\""},{"location":"FAQ/#you-dont-know-what-the-error-is","text":"It it not the purpose of the automated evaluation to pinpoint the error precisely. It is part of the software developers job to test your solution. The evaluation will tell you a general direction, but it will not identify the problem. The error messages may come from the actual execution of your code, so it might include the database server error, or the C# compiler error. This is the same level of feedback you would get in your own environment.","title":"You don't know what the error is"},{"location":"FAQ/#you-dont-know-the-github-name-of-your-instructor","text":"The instructor should have told you this. If in doubt, assign to akosdudas .","title":"You don't know the GitHub name of your instructor"},{"location":"FAQ/#you-prepared-your-solution-but-received-no-gradepoints","text":"Did you commit? And push? Do you have a pull request? Assigned to the instructor?","title":"You prepared your solution, but received no grade/points"},{"location":"GitHub-Actions/","text":"Using GitHub Actions \u00b6 The semi-automatic evaluation of the exercises is based on GitHub Actions . It is a CI system capable of running jobs on git repositories. We use this system for example to compile your code and test it. You will receive a notification about the results in a pull request. But if you need more details, such as check the application logs, you can access these using the web interface of GitHub under Actions . Here, you will see a list of Workflows . By selecting one (e.g. the last one is always at the top of the list) you see the details of this workflow. To get to the logs you need to click once more on the left. The log will be on the right side. Each green checkmark is a successful step. These steps do not correspond to you exercises; these describe the evaluation process. These steps include preparations, such as setting up the .NET environment for compiling your code (since each workflow starts in a clean environment, these steps are performed each time). Most of these steps should be successful, even if your submission contains an error. The two exceptions when these tasks might fail due to your changes are: (1) if neptun.txt is missing, or (2) your C# code does not compile. The neptun.txt is mandatory and no evaluation is performed until that is provided. The C# compilation is a step that must succeed, otherwise your application cannot be started. There might be transient errors in these workflows. An example is when a download, such as the download of the .NET environment fails. The workflow execution can be repeated if this occurs. Obviously retrying the execution may only help if the problem is indeed transient; a C# compilation error will not be resolved by a retry. (You can deduce the cause from the name of the step and the error message.) You might also be able to access the application logs. E.g. when testing a .NET application, it is started and the logs will be printed here. The image below shows the initialization of an Entity Framework application where you can also see the translated and executed SQL commands. (You would see the same in Visual Studio Output while debugging.) The content here, obviously, depends on the actual exercise.","title":"Using GitHub Actions"},{"location":"GitHub-Actions/#using-github-actions","text":"The semi-automatic evaluation of the exercises is based on GitHub Actions . It is a CI system capable of running jobs on git repositories. We use this system for example to compile your code and test it. You will receive a notification about the results in a pull request. But if you need more details, such as check the application logs, you can access these using the web interface of GitHub under Actions . Here, you will see a list of Workflows . By selecting one (e.g. the last one is always at the top of the list) you see the details of this workflow. To get to the logs you need to click once more on the left. The log will be on the right side. Each green checkmark is a successful step. These steps do not correspond to you exercises; these describe the evaluation process. These steps include preparations, such as setting up the .NET environment for compiling your code (since each workflow starts in a clean environment, these steps are performed each time). Most of these steps should be successful, even if your submission contains an error. The two exceptions when these tasks might fail due to your changes are: (1) if neptun.txt is missing, or (2) your C# code does not compile. The neptun.txt is mandatory and no evaluation is performed until that is provided. The C# compilation is a step that must succeed, otherwise your application cannot be started. There might be transient errors in these workflows. An example is when a download, such as the download of the .NET environment fails. The workflow execution can be repeated if this occurs. Obviously retrying the execution may only help if the problem is indeed transient; a C# compilation error will not be resolved by a retry. (You can deduce the cause from the name of the step and the error message.) You might also be able to access the application logs. E.g. when testing a .NET application, it is started and the logs will be printed here. The image below shows the initialization of an Entity Framework application where you can also see the translated and executed SQL commands. (You would see the same in Visual Studio Output while debugging.) The content here, obviously, depends on the actual exercise.","title":"Using GitHub Actions"},{"location":"GitHub-credentials/","text":"In university laboratories: GitHub access \u00b6 The computers may remember the GitHub credentials. You should delete this at the end of the lab. Open Credential Manager from the Start menu. On page Windows Credentials find the entry for GitHub and delete it.","title":"In university laboratories: GitHub access"},{"location":"GitHub-credentials/#in-university-laboratories-github-access","text":"The computers may remember the GitHub credentials. You should delete this at the end of the lab. Open Credential Manager from the Start menu. On page Windows Credentials find the entry for GitHub and delete it.","title":"In university laboratories: GitHub access"},{"location":"GitHub/","text":"Submitting your work (GitHub) \u00b6 We are using GitHub for submitting the solutions. Each laboratory is submitted in a GitHub repository that you will create through a provided link. The solution of the laboratory exercises are created within these repositories, then committed and pushed to GitHub. The submission is finished with a pull request assigned to the laboratory instructor. IMPORTANT The submission requirements detailed below and mandatory. Submissions not following these guidelines are not graded. Short version, aka. TL;DR \u00b6 The detailed description below shows the entire procedure. This short summary is an overview of the whole process. The lab exercises are solved in a dedicated GitHub repository created through a link in the exercise description. Your solution is submitted on a new branch, not on master. You can create any number of committed on this branch. You need to push these commits to GitHub. You submit your final solution through a pull request assigned to the laboratory instructor. You can ask questions regarding the results and evaluation in the pull request comment thread. To notify your instructor use the @name annotation in the comment text. Starting your work: git checkout \u00b6 Register a GitHub account, if you don't have one yet. Open the link in the exercise description to create your repository. If needed, authorize the GitHub Classroom application to use your account data. You will see a page where you can \"Accept the ... assignment\". Click the button. Wait for the repository creation to finish. You will get the repository URL here. Note The repository will be private. No one but you and the instructor will see it. Open the repository webpage by following the link. You will need this URL, so remember it. Clone your repository. You will need the repository git URL, which you can get from the repository webpage following the Clone or download button. You may use any git client. If you do not have a favorit yet, the simplest one is GitHub Desktop . You can list your repositories in this application directly from GitHub. If you are using console, the following command performs the clone (if the git command is available): git clone <repository link> If the cloning is successful, DO NOT START WORKING YET! The solution should not be committed to the repository master branch. Instead, create a new branch with the name solution . In GitHub Desktop, use the Branch menu for creating a new one. If using console, use the following command: git checkout -b solution Complete the exercises on this branch. You may have any number of commits and pushes. In university laboratories Before you make your first commit check whether your name and email address is properly configured. You can check this using the following commands. git config user.name git config user.email If the values are not correct, set your name and email address with the following commands executed in the repository directory.This will set the values for the repository. (It is recommended to set the email address to the one you use with GitHub.) git config user.name \"John Doe\" git config user.email \"john@doe.org\" At home When working from at home you may want to set the name and email address globally using the --global switch in the commands above. To commit using GitHub Desktop, first check if you are on the right branch. During the first push, the solution branch needs to be published. When adding further commits, verify the branch. You can publish the commit using the Push origin button. The little number of this buttons shows you how many commits need pushing. If you are using console, use the following commands: # Check the current branch and the files modified git status # Prepares all changes for commit git add . # Commit git commit -m \"f1\" # Push the new branch (first time) git push --set-upstream origin solution # Push futher commits git push Submitting the solution \u00b6 When you are ready with the exercises, verify on the repository web page that you uploaded everything. You may need to switch branches. GitHub web file upload We recommend that you do not use GitHub web file upload. If something is missing, add it to your local repository and commit and push again. When you are truly ready, open a pull request . Why the pull request? This pull request combines all changes you made, and shows us the final result. This helps the laboratory instructor to evaluate your submission more easily. This pull request means you submit your solution, hence this step cannot be omitted . To open the pull request you need to go to the repository's GitHub web frontend. If you pushed recently, GitHub will offer you to create the pull request.. You may also open the pull request from the menu at the top. It is important to specify the correct branches: master is the target into witch solution is merged. When the pull request is created, you will see a little number \"1\" on the Pull request menu showing you that there is one open item there. YOU ARE NOT FINISHED YET! The pull request will trigger a preliminary evaluation. You will see the result of this evaluation as a comment added to the pull request thread. This will be different for each laboratory. You will see the result in a comment in the pull request thread. If you need more information about the evaluation and the results, GitHub Actions can provide you more. A short introduction is provided here . If you are not satisfied with your work, you can make further changes. You only need to commit and push your changes continuing to work on the correct branch. Any changes pushed will re-trigger the evaluation of the pull request . We ask that you trigger NO MORE THAN 5 evaluations ! Making further changes If you want to make changes to your submission and not have the re-evaluation run, you should close the pull request . When you are finished, you can open a new one instead. Maximum 5 Evaluations that fail due to transient errors, such as network problems, are not counted into the 5 evaluations. But if you trigger more evaluation by mistake, or on purpose, it will be sancioned. You are required to test your solution locally before submitting it. FINALLY , when you are ready, assign the pull request to your laboratory instructor. This step is considered as the submission of your work. Without pull request If you have no pull request, or it is not assigned to the instructor, we consider it work in progress and not submitted. Done Now you are ready. After assigning the pull request, make no further changes . The instructor will evaluate the submission and close the pull request. Questions and complaints regarding the final result \u00b6 If you have questions on concerns regarding the automated evaluation, use the pull request for communication with the instructor by asking questions via comments. To let the instructor know you have questions, please use @name mention in the PR comment. This will automatically send an email notification. Please provide proof Please note, that if you think the evaluation made a mistake, you are required to support your question/complaint with proof (e.g. show how you tested your solution and prove that it worked).","title":"Submitting your work (GitHub)"},{"location":"GitHub/#submitting-your-work-github","text":"We are using GitHub for submitting the solutions. Each laboratory is submitted in a GitHub repository that you will create through a provided link. The solution of the laboratory exercises are created within these repositories, then committed and pushed to GitHub. The submission is finished with a pull request assigned to the laboratory instructor. IMPORTANT The submission requirements detailed below and mandatory. Submissions not following these guidelines are not graded.","title":"Submitting your work (GitHub)"},{"location":"GitHub/#short-version-aka-tldr","text":"The detailed description below shows the entire procedure. This short summary is an overview of the whole process. The lab exercises are solved in a dedicated GitHub repository created through a link in the exercise description. Your solution is submitted on a new branch, not on master. You can create any number of committed on this branch. You need to push these commits to GitHub. You submit your final solution through a pull request assigned to the laboratory instructor. You can ask questions regarding the results and evaluation in the pull request comment thread. To notify your instructor use the @name annotation in the comment text.","title":"Short version, aka. TL;DR"},{"location":"GitHub/#starting-your-work-git-checkout","text":"Register a GitHub account, if you don't have one yet. Open the link in the exercise description to create your repository. If needed, authorize the GitHub Classroom application to use your account data. You will see a page where you can \"Accept the ... assignment\". Click the button. Wait for the repository creation to finish. You will get the repository URL here. Note The repository will be private. No one but you and the instructor will see it. Open the repository webpage by following the link. You will need this URL, so remember it. Clone your repository. You will need the repository git URL, which you can get from the repository webpage following the Clone or download button. You may use any git client. If you do not have a favorit yet, the simplest one is GitHub Desktop . You can list your repositories in this application directly from GitHub. If you are using console, the following command performs the clone (if the git command is available): git clone <repository link> If the cloning is successful, DO NOT START WORKING YET! The solution should not be committed to the repository master branch. Instead, create a new branch with the name solution . In GitHub Desktop, use the Branch menu for creating a new one. If using console, use the following command: git checkout -b solution Complete the exercises on this branch. You may have any number of commits and pushes. In university laboratories Before you make your first commit check whether your name and email address is properly configured. You can check this using the following commands. git config user.name git config user.email If the values are not correct, set your name and email address with the following commands executed in the repository directory.This will set the values for the repository. (It is recommended to set the email address to the one you use with GitHub.) git config user.name \"John Doe\" git config user.email \"john@doe.org\" At home When working from at home you may want to set the name and email address globally using the --global switch in the commands above. To commit using GitHub Desktop, first check if you are on the right branch. During the first push, the solution branch needs to be published. When adding further commits, verify the branch. You can publish the commit using the Push origin button. The little number of this buttons shows you how many commits need pushing. If you are using console, use the following commands: # Check the current branch and the files modified git status # Prepares all changes for commit git add . # Commit git commit -m \"f1\" # Push the new branch (first time) git push --set-upstream origin solution # Push futher commits git push","title":"Starting your work: git checkout"},{"location":"GitHub/#submitting-the-solution","text":"When you are ready with the exercises, verify on the repository web page that you uploaded everything. You may need to switch branches. GitHub web file upload We recommend that you do not use GitHub web file upload. If something is missing, add it to your local repository and commit and push again. When you are truly ready, open a pull request . Why the pull request? This pull request combines all changes you made, and shows us the final result. This helps the laboratory instructor to evaluate your submission more easily. This pull request means you submit your solution, hence this step cannot be omitted . To open the pull request you need to go to the repository's GitHub web frontend. If you pushed recently, GitHub will offer you to create the pull request.. You may also open the pull request from the menu at the top. It is important to specify the correct branches: master is the target into witch solution is merged. When the pull request is created, you will see a little number \"1\" on the Pull request menu showing you that there is one open item there. YOU ARE NOT FINISHED YET! The pull request will trigger a preliminary evaluation. You will see the result of this evaluation as a comment added to the pull request thread. This will be different for each laboratory. You will see the result in a comment in the pull request thread. If you need more information about the evaluation and the results, GitHub Actions can provide you more. A short introduction is provided here . If you are not satisfied with your work, you can make further changes. You only need to commit and push your changes continuing to work on the correct branch. Any changes pushed will re-trigger the evaluation of the pull request . We ask that you trigger NO MORE THAN 5 evaluations ! Making further changes If you want to make changes to your submission and not have the re-evaluation run, you should close the pull request . When you are finished, you can open a new one instead. Maximum 5 Evaluations that fail due to transient errors, such as network problems, are not counted into the 5 evaluations. But if you trigger more evaluation by mistake, or on purpose, it will be sancioned. You are required to test your solution locally before submitting it. FINALLY , when you are ready, assign the pull request to your laboratory instructor. This step is considered as the submission of your work. Without pull request If you have no pull request, or it is not assigned to the instructor, we consider it work in progress and not submitted. Done Now you are ready. After assigning the pull request, make no further changes . The instructor will evaluate the submission and close the pull request.","title":"Submitting the solution"},{"location":"GitHub/#questions-and-complaints-regarding-the-final-result","text":"If you have questions on concerns regarding the automated evaluation, use the pull request for communication with the instructor by asking questions via comments. To let the instructor know you have questions, please use @name mention in the PR comment. This will automatically send an email notification. Please provide proof Please note, that if you think the evaluation made a mistake, you are required to support your question/complaint with proof (e.g. show how you tested your solution and prove that it worked).","title":"Questions and complaints regarding the final result"},{"location":"VisualStudio/","text":"Install Visual Studio \u00b6 In some of the exercises require Microsoft Visual Studio version 2019 16.6 or newer . The free Community edition is sufficient for solving these exercises. VS Code The exercises can also be solved using the platform-independent Visual Studio Code . However, the skeleton of the exercises are prepared for Visual Studio. If you are working with VS Code, you need to configure your environment. Visual Studio workloads \u00b6 When installing Visual Studio the following workloads have to be selected: ASP.NET and web development .NET Core cross-platform development An existing installation can be modified using the Visual Studio Installer .","title":"Install Visual Studio"},{"location":"VisualStudio/#install-visual-studio","text":"In some of the exercises require Microsoft Visual Studio version 2019 16.6 or newer . The free Community edition is sufficient for solving these exercises. VS Code The exercises can also be solved using the platform-independent Visual Studio Code . However, the skeleton of the exercises are prepared for Visual Studio. If you are working with VS Code, you need to configure your environment.","title":"Install Visual Studio"},{"location":"VisualStudio/#visual-studio-workloads","text":"When installing Visual Studio the following workloads have to be selected: ASP.NET and web development .NET Core cross-platform development An existing installation can be modified using the Visual Studio Installer .","title":"Visual Studio workloads"},{"location":"Lab-QueryOptimization/","text":"Query optimization \u00b6 We will examine the query optimization behavior of Microsoft SQL Server. In order to properly understand the behavior of the optimizer and be able to document it, the first 5 exercises are solved together and the instructor will explain the queries and the behavior. The rest of the exercises is individual work where it is your task to infer the reason for a specific plan. You shall submit the documentation of all exercises. Pre-requisites and preparation \u00b6 Required tools to complete the tasks: Windows, Linux or MacOS: All tools are platform-independent, or a platform-independent alternative is available. Microsoft SQL Server The free Express version is sufficient, or you may also use localdb installed with Visual Studio A Linux version is also available. On MacOS you can use Docker. Visual Studio Code or any other tool for writing markdown SQL Server Management Studio , or you may also use the platform-independent Azure Data Studio is Database initialization script: mssql.sql GitHub account and a git client Materials for preparing for this laboratory: Markdown introduction and detailed documentation Using Microsoft SQL Server: description and video The schema of the database Microsoft SQL Server query optimization Check the materials of Data-driven systems Initial steps \u00b6 Keep in mind that you are expected to follow the submission process . Create and check out your Git repository \u00b6 Create your personal git repository at: Wait for the repository creation to complete, then check out the repository. If in university computer laboratories you are not asked for credentials to log in to GitHub when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here ), then retry the checkout. Create a new branch with the name solution and work on this branch. Open the checked out folder and type your Neptun code into the neptun.txt file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file. Open the markdown file \u00b6 Create the documentation in a markdown file. Open the checked out git repository with a markdown editor. We recommend using Visual Studio Code: Start VS Code. Use File > Open Folder... to open the git repository folder. In the folder structure on the left find README.md and double click to open. Edit this file. When you create a screenshot, put the file in this directory next to the other files. This will enable you to use the file name to include the image. Use simple file names You should avoid using special characters in the file names. Best of you use the English alphabet and no spaces either. For convenient editing open the preview ( Ctrl-K + V ). Alternative editor If you do not like VS code, you can also use the GitHub web interface a to edit the markdown; you also have a preview here. File upload will be trickier though. Create the database \u00b6 Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details: Server name: (localdb)\\mssqllocaldb or .\\sqlexpress (which is short for: localhost\\sqlexpress ) Authentication: Windows authentication Create a new databse (if it does not exist yet). The name should be your Neptun code: in Object Explorer right click Databases and choose Create Database . Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the right database in the toolbar dropdown. Verify that the tables are created. If the Tables folder was open before, you need to refresh it. . Getting the actual execution plan \u00b6 If you are not using Windows We are primarily using SQL Server Management Studio to get the execution plans. If you are not using Windows, you can also use Azure Data Studio-t to obtain the query plan . In the following exercises we will check the best query plan the optimizer chose and the server executed. In SQL Server Management Studio open the Query menu and check Include Actual Execution Plan . The plan will be displayed after the query is completed at the bottom of the window on the Execution plan pane. The plan is a data flow diagram where the query execution is the flow of the data. The items are the individual steps and the percentages are the relative cost of each step with regards to the whole query.","title":"Query optimization"},{"location":"Lab-QueryOptimization/#query-optimization","text":"We will examine the query optimization behavior of Microsoft SQL Server. In order to properly understand the behavior of the optimizer and be able to document it, the first 5 exercises are solved together and the instructor will explain the queries and the behavior. The rest of the exercises is individual work where it is your task to infer the reason for a specific plan. You shall submit the documentation of all exercises.","title":"Query optimization"},{"location":"Lab-QueryOptimization/#pre-requisites-and-preparation","text":"Required tools to complete the tasks: Windows, Linux or MacOS: All tools are platform-independent, or a platform-independent alternative is available. Microsoft SQL Server The free Express version is sufficient, or you may also use localdb installed with Visual Studio A Linux version is also available. On MacOS you can use Docker. Visual Studio Code or any other tool for writing markdown SQL Server Management Studio , or you may also use the platform-independent Azure Data Studio is Database initialization script: mssql.sql GitHub account and a git client Materials for preparing for this laboratory: Markdown introduction and detailed documentation Using Microsoft SQL Server: description and video The schema of the database Microsoft SQL Server query optimization Check the materials of Data-driven systems","title":"Pre-requisites and preparation"},{"location":"Lab-QueryOptimization/#initial-steps","text":"Keep in mind that you are expected to follow the submission process .","title":"Initial steps"},{"location":"Lab-QueryOptimization/#create-and-check-out-your-git-repository","text":"Create your personal git repository at: Wait for the repository creation to complete, then check out the repository. If in university computer laboratories you are not asked for credentials to log in to GitHub when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here ), then retry the checkout. Create a new branch with the name solution and work on this branch. Open the checked out folder and type your Neptun code into the neptun.txt file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.","title":"Create and check out your Git repository"},{"location":"Lab-QueryOptimization/#open-the-markdown-file","text":"Create the documentation in a markdown file. Open the checked out git repository with a markdown editor. We recommend using Visual Studio Code: Start VS Code. Use File > Open Folder... to open the git repository folder. In the folder structure on the left find README.md and double click to open. Edit this file. When you create a screenshot, put the file in this directory next to the other files. This will enable you to use the file name to include the image. Use simple file names You should avoid using special characters in the file names. Best of you use the English alphabet and no spaces either. For convenient editing open the preview ( Ctrl-K + V ). Alternative editor If you do not like VS code, you can also use the GitHub web interface a to edit the markdown; you also have a preview here. File upload will be trickier though.","title":"Open the markdown file"},{"location":"Lab-QueryOptimization/#create-the-database","text":"Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details: Server name: (localdb)\\mssqllocaldb or .\\sqlexpress (which is short for: localhost\\sqlexpress ) Authentication: Windows authentication Create a new databse (if it does not exist yet). The name should be your Neptun code: in Object Explorer right click Databases and choose Create Database . Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the right database in the toolbar dropdown. Verify that the tables are created. If the Tables folder was open before, you need to refresh it. .","title":"Create the database"},{"location":"Lab-QueryOptimization/#getting-the-actual-execution-plan","text":"If you are not using Windows We are primarily using SQL Server Management Studio to get the execution plans. If you are not using Windows, you can also use Azure Data Studio-t to obtain the query plan . In the following exercises we will check the best query plan the optimizer chose and the server executed. In SQL Server Management Studio open the Query menu and check Include Actual Execution Plan . The plan will be displayed after the query is completed at the bottom of the window on the Execution plan pane. The plan is a data flow diagram where the query execution is the flow of the data. The items are the individual steps and the percentages are the relative cost of each step with regards to the whole query.","title":"Getting the actual execution plan"},{"location":"Lab-QueryOptimization/Exercise-1/","text":"Exercises solved together \u00b6 SUBMISSION The submission shall be a documentation written in the README.md file: document the SQL commands (if the exercise tells you to), a screenshot of the query plan (just the plan and not the entire desktop!), and an explanation: what do you see on the query plan and why the system chose this option. If the query plan and/or the explanation of subsequent exercises is the same, or at least very similar, it is enough to document everything once (one screenshot and one explanation); and list which (sub)exercises it the solution for. Exercise 1 (2p) \u00b6 Drop the CustomerSite => Customer foreign key and the Customer table primary key constraint. Find these in the Object Explorer and delete them (the PK... is the primary key while the FK... is the foreign key - the ones you need to delete are in two different tables!): Execute the following queries on the Customer table and examine the execution plans (always fetch the entire records using select * ): a) query the whole table b) get one record based on primary key c) querying records where the primary key is not a specified constant (use the <> comparison operation for not equals) d) querying records where the primary key is greater than a specified constant e) querying records where the primary key is greater than a specified constant, ordering by ID descending Document the SQL commands you used and explain the actual query execution plan! Exercise 2 (2p) \u00b6 Re-create the primary key of the Customer table: Right click the table > Design > then right click the ID column \"Set Primary Key \" then Save, or execute ALTER TABLE [dbo].[Customer] ADD PRIMARY KEY CLUSTERED ([ID] ASC) Re-run the same queries as in the previous exercise. What do you experience? Exercise 3 (2p) \u00b6 Execute the following queries on the Product table. f) query the whole table g) search for specific records where Price equals a value h) query records where Price is not a specified constant (<>) i) query records where Price is greater than a value j) query records where Price is greater than a value, ordered by Price descending Document the SQL commands you used and explain the actual query execution plan! Exercise 4 (2p) \u00b6 Add a new non-clustered index on column Price . How do the execution plans change? To add the index use Object Explorer , find the table, expand it and right click Indexes -> New index > Non-Clustered Index... Indices should have meaningful names, e.g. IX_Tablename_Fieldname . Add Price column to the Index key columns list. Repeat the queries from the previous exercise and explain the plans! Exercise 5 (2p) \u00b6 Generate new records into the Product table with the script below. How do the execution plans change? When repeating the query for sub-exercise i), chose a constant value that will yield few resulting records, then chose a value that returns almost all records. Explain the differences! SELECT TOP ( 1000000 ) n = ABS ( CHECKSUM ( NEWID ())) INTO dbo . Numbers FROM sys . all_objects AS s1 CROSS JOIN sys . all_objects AS s2 OPTION ( MAXDOP 1 ); CREATE CLUSTERED INDEX n ON dbo . Numbers ( n ) ; INSERT INTO Product ( Name , Price , Stock , VATID , CategoryID ) SELECT 'Apple' , n % 50000 , n % 100 , 3 , 13 FROM Numbers","title":"Exercises solved together"},{"location":"Lab-QueryOptimization/Exercise-1/#exercises-solved-together","text":"SUBMISSION The submission shall be a documentation written in the README.md file: document the SQL commands (if the exercise tells you to), a screenshot of the query plan (just the plan and not the entire desktop!), and an explanation: what do you see on the query plan and why the system chose this option. If the query plan and/or the explanation of subsequent exercises is the same, or at least very similar, it is enough to document everything once (one screenshot and one explanation); and list which (sub)exercises it the solution for.","title":"Exercises solved together"},{"location":"Lab-QueryOptimization/Exercise-1/#exercise-1-2p","text":"Drop the CustomerSite => Customer foreign key and the Customer table primary key constraint. Find these in the Object Explorer and delete them (the PK... is the primary key while the FK... is the foreign key - the ones you need to delete are in two different tables!): Execute the following queries on the Customer table and examine the execution plans (always fetch the entire records using select * ): a) query the whole table b) get one record based on primary key c) querying records where the primary key is not a specified constant (use the <> comparison operation for not equals) d) querying records where the primary key is greater than a specified constant e) querying records where the primary key is greater than a specified constant, ordering by ID descending Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 1 (2p)"},{"location":"Lab-QueryOptimization/Exercise-1/#exercise-2-2p","text":"Re-create the primary key of the Customer table: Right click the table > Design > then right click the ID column \"Set Primary Key \" then Save, or execute ALTER TABLE [dbo].[Customer] ADD PRIMARY KEY CLUSTERED ([ID] ASC) Re-run the same queries as in the previous exercise. What do you experience?","title":"Exercise 2 (2p)"},{"location":"Lab-QueryOptimization/Exercise-1/#exercise-3-2p","text":"Execute the following queries on the Product table. f) query the whole table g) search for specific records where Price equals a value h) query records where Price is not a specified constant (<>) i) query records where Price is greater than a value j) query records where Price is greater than a value, ordered by Price descending Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 3 (2p)"},{"location":"Lab-QueryOptimization/Exercise-1/#exercise-4-2p","text":"Add a new non-clustered index on column Price . How do the execution plans change? To add the index use Object Explorer , find the table, expand it and right click Indexes -> New index > Non-Clustered Index... Indices should have meaningful names, e.g. IX_Tablename_Fieldname . Add Price column to the Index key columns list. Repeat the queries from the previous exercise and explain the plans!","title":"Exercise 4 (2p)"},{"location":"Lab-QueryOptimization/Exercise-1/#exercise-5-2p","text":"Generate new records into the Product table with the script below. How do the execution plans change? When repeating the query for sub-exercise i), chose a constant value that will yield few resulting records, then chose a value that returns almost all records. Explain the differences! SELECT TOP ( 1000000 ) n = ABS ( CHECKSUM ( NEWID ())) INTO dbo . Numbers FROM sys . all_objects AS s1 CROSS JOIN sys . all_objects AS s2 OPTION ( MAXDOP 1 ); CREATE CLUSTERED INDEX n ON dbo . Numbers ( n ) ; INSERT INTO Product ( Name , Price , Stock , VATID , CategoryID ) SELECT 'Apple' , n % 50000 , n % 100 , 3 , 13 FROM Numbers","title":"Exercise 5 (2p)"},{"location":"Lab-QueryOptimization/Exercise-2/","text":"Individual exercises \u00b6 SUBMISSION Continue documenting the results the same way. Exercise 6 (1p) \u00b6 Repeat the queries on the Product table but instead of fetching the entire record only get the ID and the Price columns. How do the execution plans change? Explain the differences! Exercise 7 (1p) \u00b6 Analyze the following queries executed on the Product table: k) query records where the primary key is between two values (use the BETWEEN operator) k) query records where the primary key is between two values (use the BETWEEN operator) or it is equal to a value that falls outside of this range Document the SQL commands you used and explain the actual query execution plan! Exercise 8 (1p) \u00b6 In Exercises 6 WHERE Price= compared an integer and a floating point number. Let us experiment with this: m) where cast(Price as int) = integer number n) where Price BETWEEN integer number-0.0001 AND integer number+0.0001 Chose a random integer number of these queries, and fetch only the primary key . Analyze the execution plans. Exercise 9 (1p) \u00b6 Analyze the following queries execute on the Product table: o) query entire records where Price is less than a constant value (the filter should yield few matches), ordered by ID descending p) the same, but fetch only ID and Price q) query entire records where Price is greater than a constant value (the filter should yield a lot of matches), ordered by ID descending r) the same, but fetch only ID and Price Document the SQL commands you used and explain the actual query execution plan! Exercise 10 (1p) \u00b6 Create a new index for the Name column and analyze the following queries executed on the Product table: s) query names and Ids where the name begins with Z - use SUBSTRING t) the same, but now using LIKE u) query names and Ids where the name contains a Z (LIKE) v) query the ID of a product where the name equals (=) a string w) the same, but now compare case-insensitively using UPPER Document the SQL commands you used and explain the actual query execution plan! Exercise 11 (1p) \u00b6 Analyze the following queries executed on the Product table: x) get the maximum of Id y) get the minimum of Price Document the SQL commands you used and explain the actual query execution plan! Exercise 12 (1p) \u00b6 Query the number of products per category ( CategoryId ). Document the SQL commands you used and explain the actual query execution plan! Exercise 13 (1p) \u00b6 How could we improve on the performance of the previous query? Explain and implement the solution and repeat the previous query. Tip You need to add a new index. The question is: to which field? Exercise 14 (1p) \u00b6 List the Name of each Product where CategoryId equals 2. Document the SQL commands you used and explain the actual query execution plan! Explain whether the index added in the previous exercises helps the performance. Exercise 15 (1p) \u00b6 Improve the performance of the previous query. Extend the index added before by adding the name: right click the index -> Properties -> and add Name to Included columns . Repeat the previous query again and analyze the plan.","title":"Individual exercises"},{"location":"Lab-QueryOptimization/Exercise-2/#individual-exercises","text":"SUBMISSION Continue documenting the results the same way.","title":"Individual exercises"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-6-1p","text":"Repeat the queries on the Product table but instead of fetching the entire record only get the ID and the Price columns. How do the execution plans change? Explain the differences!","title":"Exercise 6 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-7-1p","text":"Analyze the following queries executed on the Product table: k) query records where the primary key is between two values (use the BETWEEN operator) k) query records where the primary key is between two values (use the BETWEEN operator) or it is equal to a value that falls outside of this range Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 7 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-8-1p","text":"In Exercises 6 WHERE Price= compared an integer and a floating point number. Let us experiment with this: m) where cast(Price as int) = integer number n) where Price BETWEEN integer number-0.0001 AND integer number+0.0001 Chose a random integer number of these queries, and fetch only the primary key . Analyze the execution plans.","title":"Exercise 8 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-9-1p","text":"Analyze the following queries execute on the Product table: o) query entire records where Price is less than a constant value (the filter should yield few matches), ordered by ID descending p) the same, but fetch only ID and Price q) query entire records where Price is greater than a constant value (the filter should yield a lot of matches), ordered by ID descending r) the same, but fetch only ID and Price Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 9 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-10-1p","text":"Create a new index for the Name column and analyze the following queries executed on the Product table: s) query names and Ids where the name begins with Z - use SUBSTRING t) the same, but now using LIKE u) query names and Ids where the name contains a Z (LIKE) v) query the ID of a product where the name equals (=) a string w) the same, but now compare case-insensitively using UPPER Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 10 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-11-1p","text":"Analyze the following queries executed on the Product table: x) get the maximum of Id y) get the minimum of Price Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 11 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-12-1p","text":"Query the number of products per category ( CategoryId ). Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 12 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-13-1p","text":"How could we improve on the performance of the previous query? Explain and implement the solution and repeat the previous query. Tip You need to add a new index. The question is: to which field?","title":"Exercise 13 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-14-1p","text":"List the Name of each Product where CategoryId equals 2. Document the SQL commands you used and explain the actual query execution plan! Explain whether the index added in the previous exercises helps the performance.","title":"Exercise 14 (1p)"},{"location":"Lab-QueryOptimization/Exercise-2/#exercise-15-1p","text":"Improve the performance of the previous query. Extend the index added before by adding the name: right click the index -> Properties -> and add Name to Included columns . Repeat the previous query again and analyze the plan.","title":"Exercise 15 (1p)"},{"location":"Lab-QueryOptimization/Exercise-3/","text":"Optional exercises \u00b6 You can earn and additional +3 points with the completion of this exercise. Exercise 16 \u00b6 Compare the following Invoice - InvoiceItem query: for each invoice item get the customer name. SELECT CustomerName , Name FROM Invoice JOIN InvoiceItem ON Invoice . ID = InvoiceItem . InvoiceID Which join strategy was chosen? Explain why the system chose it! Exercise 17 \u00b6 Compare the various JOIN strategies when querying all Product - Category record pairs. Tip Use query hints or the option command to explicitly specify the join strategy. Put the 3 queries (each with their own join strategy) into one execution unit (execute them together). This will give you the relative cost of each option. Document the SQL commands you used and explain the actual query execution plan!","title":"Optional exercises"},{"location":"Lab-QueryOptimization/Exercise-3/#optional-exercises","text":"You can earn and additional +3 points with the completion of this exercise.","title":"Optional exercises"},{"location":"Lab-QueryOptimization/Exercise-3/#exercise-16","text":"Compare the following Invoice - InvoiceItem query: for each invoice item get the customer name. SELECT CustomerName , Name FROM Invoice JOIN InvoiceItem ON Invoice . ID = InvoiceItem . InvoiceID Which join strategy was chosen? Explain why the system chose it!","title":"Exercise 16"},{"location":"Lab-QueryOptimization/Exercise-3/#exercise-17","text":"Compare the various JOIN strategies when querying all Product - Category record pairs. Tip Use query hints or the option command to explicitly specify the join strategy. Put the 3 queries (each with their own join strategy) into one execution unit (execute them together). This will give you the relative cost of each option. Document the SQL commands you used and explain the actual query execution plan!","title":"Exercise 17"},{"location":"Lab-ReportingServices/","text":"Reporting Services \u00b6 In this lab we will work with Microsoft SQL Server Reporting Services , a tool we have not seen before. We will start working together, then some of the exercises will be individual work. You shall submit the solution of all exercises. Pre-requisites and preparation \u00b6 Required tools to complete the tasks: Windows Microsoft SQL Server: The free Express version is sufficient, or you may also use localdb installed with Visual Studio SQL Server Management Studio Database initialization script: adventure-works-2014-oltp-script.zip Microsoft Visual Studio 2019: The free Community edition is sufficient Report Server Project support for Visual Studio: Microsoft Reporting Services Projects extension (It is recommended to keep the extension up to date .) GitHub account and a git client Materials for preparing for this laboratory: Using Microsoft SQL Server: description and video SQL Reporting Services official tutorial Initial steps \u00b6 Keep in mind that you are expected to follow the submission process . Create and check out your Git repository \u00b6 Create your personal git repository at: Wait for the repository creation to complete, then check out the repository. If in university computer laboratories you are not asked for credentials to log in to GitHub when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here ), then retry the checkout. Create a new branch with the name solution and work on this branch. Open the checked out folder and type your Neptun code into the neptun.txt file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file. Create the Adventure Works 2014 database \u00b6 We will work with the Adventure Works sample database. This database contains the operational information of a fictional retail company. Instead of understanding the database contents, we will use a few predefined queries that list product purchases. Download adventure-works-2014-oltp-script.zip and extract it to folder C:\\work\\Adventure Works 2014 OLTP Script (create the folder if it does not exist yet). The folder name should be as above, otherwise you need change the path in the sql script: -- NOTE: Change this path if you copied the script source to another path : setvar SqlSamplesSourceDataPath \"C:\\work\\Adventure Works 2014 OLTP Script\\\" If you need to edit the path, make sure to keep the trailing slash! Connect to Microsoft SQL Server using SQL Server Management Studio. Use the following connection details. Server name: (localdb)\\mssqllocaldb Authentication: Windows authentication Use File / Open / File... to open instawdb.sql from the folder created above. Do not execute it yet! First you should turn on SQLCMD mode: in the Query menu click SQLCMD Mode ; then click Execute . Verify whether the database and its contents are created. Select Databases in the Object explorer on the left and click Refresh . The AdventureWorks2014 database shall appear with a number of tables inside. . Open a new SQL Query window on this database (right click the database and chose New query ), and execute the following script with your own Neptun code substituted: update Production . Product set Name = 'NEPTUN' + Name Check the contents of table Production.Product and verify if it has your Neptun code in the product names: right click the table and chose Select top 1000 rows . IMPORTANT It is important that your Neptun code is listed in the names. You will need to create screenshots in the following exercises, and your Neptun code must appear on these images.","title":"Reporting Services"},{"location":"Lab-ReportingServices/#reporting-services","text":"In this lab we will work with Microsoft SQL Server Reporting Services , a tool we have not seen before. We will start working together, then some of the exercises will be individual work. You shall submit the solution of all exercises.","title":"Reporting Services"},{"location":"Lab-ReportingServices/#pre-requisites-and-preparation","text":"Required tools to complete the tasks: Windows Microsoft SQL Server: The free Express version is sufficient, or you may also use localdb installed with Visual Studio SQL Server Management Studio Database initialization script: adventure-works-2014-oltp-script.zip Microsoft Visual Studio 2019: The free Community edition is sufficient Report Server Project support for Visual Studio: Microsoft Reporting Services Projects extension (It is recommended to keep the extension up to date .) GitHub account and a git client Materials for preparing for this laboratory: Using Microsoft SQL Server: description and video SQL Reporting Services official tutorial","title":"Pre-requisites and preparation"},{"location":"Lab-ReportingServices/#initial-steps","text":"Keep in mind that you are expected to follow the submission process .","title":"Initial steps"},{"location":"Lab-ReportingServices/#create-and-check-out-your-git-repository","text":"Create your personal git repository at: Wait for the repository creation to complete, then check out the repository. If in university computer laboratories you are not asked for credentials to log in to GitHub when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here ), then retry the checkout. Create a new branch with the name solution and work on this branch. Open the checked out folder and type your Neptun code into the neptun.txt file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.","title":"Create and check out your Git repository"},{"location":"Lab-ReportingServices/#create-the-adventure-works-2014-database","text":"We will work with the Adventure Works sample database. This database contains the operational information of a fictional retail company. Instead of understanding the database contents, we will use a few predefined queries that list product purchases. Download adventure-works-2014-oltp-script.zip and extract it to folder C:\\work\\Adventure Works 2014 OLTP Script (create the folder if it does not exist yet). The folder name should be as above, otherwise you need change the path in the sql script: -- NOTE: Change this path if you copied the script source to another path : setvar SqlSamplesSourceDataPath \"C:\\work\\Adventure Works 2014 OLTP Script\\\" If you need to edit the path, make sure to keep the trailing slash! Connect to Microsoft SQL Server using SQL Server Management Studio. Use the following connection details. Server name: (localdb)\\mssqllocaldb Authentication: Windows authentication Use File / Open / File... to open instawdb.sql from the folder created above. Do not execute it yet! First you should turn on SQLCMD mode: in the Query menu click SQLCMD Mode ; then click Execute . Verify whether the database and its contents are created. Select Databases in the Object explorer on the left and click Refresh . The AdventureWorks2014 database shall appear with a number of tables inside. . Open a new SQL Query window on this database (right click the database and chose New query ), and execute the following script with your own Neptun code substituted: update Production . Product set Name = 'NEPTUN' + Name Check the contents of table Production.Product and verify if it has your Neptun code in the product names: right click the table and chose Select top 1000 rows . IMPORTANT It is important that your Neptun code is listed in the names. You will need to create screenshots in the following exercises, and your Neptun code must appear on these images.","title":"Create the Adventure Works 2014 database"},{"location":"Lab-ReportingServices/Exercise-1/","text":"Exercise 1: Table report \u00b6 This exercise is solved together . In the checked out repository folder locate file reportserver.sln and open it with Visual Studio. This is an empty Report Server project. The Report Server project consists mainly of Report Definition (.rdl) files, that define the data sources (queries) and a template, which, when rendered, produces the final result: a report. These reports can be installed to a Report Server and executed there, providing the users with up-to-date data. In this lab we will not use the Report Server. This is manly due to the fact that the configuration would require administrative privileges that we do not have in the labs. Therefore, we will preview the reports in Visual Studio. Create the first Report Definition file \u00b6 In the Solution Explorer right click Reports and chose Add > New Item . Chose the Report from among the listed templates. Call it Sales Orders.rdl , then click Add. The Report Designer will open and the new .rdl file is displayed in Design view. This is our development view. The Report Designer has two views: Design and Preview . A panel called Report Data (on the left) is also opened. Here, we can define data sources. If the data sources are set, we can create the report on the Design tab and check how it would look like on the Preview tab. Configuring the data source \u00b6 A data source defines where the our data comes from. This will be the SQL Server database created before. Using the Report Data pane click New > Data Source . The name shall be \"AdventureWorks2014\". Chose Microsoft SQL Server as the connection type and click the button to the right of connection string to configure the database access Server name: (localdb)\\mssqllocaldb Authentication: Windows Authentication Select or enter database name: AdventureWorks2014 Click OK to close the dialog. Then re-open the Data Source settings from the Report Data panel by right clicking on the newly created data source and opening its properties, then go to the Credentials page. The following checkbox has to be checked: Configuring a data set \u00b6 The next step is the configuration of a dataset. Practically, this means executing a query in the database. Using the Report Data pane click New > Data Set . Call the dataset \"AdventureWorksDataset\". Select the data source created before from the dropdown, then apply the following settings: Copy the following query. SELECT soh . OrderDate AS [ Date ], soh . SalesOrderNumber AS [ Order ], pps . Name AS Subcat , pp . Name as Product , SUM ( sd . OrderQty ) AS Qty , SUM ( sd . LineTotal ) AS LineTotal FROM Sales . SalesPerson sp INNER JOIN Sales . SalesOrderHeader AS soh ON sp . BusinessEntityID = soh . SalesPersonID INNER JOIN Sales . SalesOrderDetail AS sd ON sd . SalesOrderID = soh . SalesOrderID INNER JOIN Production . Product AS pp ON sd . ProductID = pp . ProductID INNER JOIN Production . ProductSubcategory AS pps ON pp . ProductSubcategoryID = pps . ProductSubcategoryID INNER JOIN Production . ProductCategory AS ppc ON ppc . ProductCategoryID = pps . ProductCategoryID GROUP BY ppc . Name , soh . OrderDate , soh . SalesOrderNumber , pps . Name , pp . Name , soh . SalesPersonID HAVING ppc . Name = 'Clothing' Click Refresh fields when ready. We have a Query Designer where the query can be created with visual aids. We will not use it, but it is available. Click OK to close the dialog. Table report (5p) \u00b6 Now that we have our connection to the database and the query that will supply the data, let us create a report. A report is basically data from the database displayed in a table or with diagrams. Open the Toolbox pane. You can do this from the View menu. From the Toolbox chose Table and draw a table on the big, empty and white canvas on the Design tab: Switch back to the Report Data pane and expand the AdventureWorksDataset: If the node is empty or cannot be opened, you need to re-open the data set properties using right click, then clicking the Refresh Fields button. Drag the Date field to the first column of the table. It should look like this: The [Date] in the second row shows the expression to evaluate, while \"Date\" in the first row is the literal header label - we can change it too. Similarly, add Order and Product to the second and third columns. Add Qty as well: drag it to the right side of the last column; the cursor icon will changed to + sign and a blue line at the end of the table will appear. This will add a new, fourth column. Add LineTotal similarly into the fifth column. The first report is almost ready. Let us check how it looks like using the Preview tab. Note, that it might take a while for it to open the first time. Will be faster the second time though! Verify that your Neptun code appears in the table content! (If not, you forgot a preparation step. Go back, and repeat the steps!) We can print, or export the report into various formats (e.g. Word, Excel, PDF). However, this report is not very pretty, e.g. the currency is not displayed and the Qty and date columns are not formatted, etc. Go back to Design tab, right click the [Date] expression and select Text Box Properties. Navigate to the Number page, then select the Date category and chose a date format you like. Right click [LineTotal] , use Text Box Properties again and select the Currency option in Number . By moving the mouse over the gray boxes at the top of the table header the cursor changes to resize mode. (Just like you would resize a table in Word.) Use this to resize the entire table and the columns ( Qty and Line Total can be narrower, while the others might need more space). Finally, emphasize the header row. To do this, select the whole row (by clicking the gray rectangle on the the left end of the row) and click Bold on the ribbon. If you check preview, it should look like this: SUBMISSION If you are continuing with the next exercise, you may omit creating the screenshot here. Create a screenshot of the report preview page. Save the screenshot as f1.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible! Grouping and total value (5p) \u00b6 The report we created is very long and it contains everything without structure. These are retail sales information: the amount of product sold each day. Let us group the data. Go back to Design tab. Make sure that we see the Row Groups pane below the table. If it is not there, right click the design area and select Grouping in the View menu. Drag the Date field from Report Data to the Row Groups pane above the (Details) row. The table will look like this: Drag field Order into Row Groups between Date and (Details) . Now there are duplicate columns in the table. Let us delete these. Select the rightmost Date and Order columns by clicking on the gray boxes above them. Delete them by right click and Delete Columns . Unfortunately, the format of the new Date column is now lost, but you can set it again as previously. Check the Preview now, and see that the table is now ordered and grouped as we specified it. Go back to the Design view. Right click the [LineTotal] cell and click Add Total . This will add a total for each Order (which we used for grouping). There will be no label added to this line. Add one by left clicking the cell and typing: \"Order Total\" Holding the CTRL key pressed down click Order Total and the two cells to the right to select them all, then set a background color by choosing one from the Format menu. Check the preview of the report now. Let us create a daily total as well! Go back to the Design view. Right click on the [Order] cell and click Add Total > After . A new cell (Total) appears below [Order] . Click in it and change the label to \"Daily Total\u201d. Select the cell and the three right next to it (e.g. by using CTRL and clicking them) and change their background color ( Format > Background color ). Since there are quire a few orders per day, you may need to scroll down 4-5 pages in order to check the result in the preview: SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f1.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview including the lines showing the totals (a turn a few pages if needed to see one). Verify that your Neptun code is visible!","title":"Exercise 1: Table report"},{"location":"Lab-ReportingServices/Exercise-1/#exercise-1-table-report","text":"This exercise is solved together . In the checked out repository folder locate file reportserver.sln and open it with Visual Studio. This is an empty Report Server project. The Report Server project consists mainly of Report Definition (.rdl) files, that define the data sources (queries) and a template, which, when rendered, produces the final result: a report. These reports can be installed to a Report Server and executed there, providing the users with up-to-date data. In this lab we will not use the Report Server. This is manly due to the fact that the configuration would require administrative privileges that we do not have in the labs. Therefore, we will preview the reports in Visual Studio.","title":"Exercise 1: Table report"},{"location":"Lab-ReportingServices/Exercise-1/#create-the-first-report-definition-file","text":"In the Solution Explorer right click Reports and chose Add > New Item . Chose the Report from among the listed templates. Call it Sales Orders.rdl , then click Add. The Report Designer will open and the new .rdl file is displayed in Design view. This is our development view. The Report Designer has two views: Design and Preview . A panel called Report Data (on the left) is also opened. Here, we can define data sources. If the data sources are set, we can create the report on the Design tab and check how it would look like on the Preview tab.","title":"Create the first Report Definition file"},{"location":"Lab-ReportingServices/Exercise-1/#configuring-the-data-source","text":"A data source defines where the our data comes from. This will be the SQL Server database created before. Using the Report Data pane click New > Data Source . The name shall be \"AdventureWorks2014\". Chose Microsoft SQL Server as the connection type and click the button to the right of connection string to configure the database access Server name: (localdb)\\mssqllocaldb Authentication: Windows Authentication Select or enter database name: AdventureWorks2014 Click OK to close the dialog. Then re-open the Data Source settings from the Report Data panel by right clicking on the newly created data source and opening its properties, then go to the Credentials page. The following checkbox has to be checked:","title":"Configuring the data source"},{"location":"Lab-ReportingServices/Exercise-1/#configuring-a-data-set","text":"The next step is the configuration of a dataset. Practically, this means executing a query in the database. Using the Report Data pane click New > Data Set . Call the dataset \"AdventureWorksDataset\". Select the data source created before from the dropdown, then apply the following settings: Copy the following query. SELECT soh . OrderDate AS [ Date ], soh . SalesOrderNumber AS [ Order ], pps . Name AS Subcat , pp . Name as Product , SUM ( sd . OrderQty ) AS Qty , SUM ( sd . LineTotal ) AS LineTotal FROM Sales . SalesPerson sp INNER JOIN Sales . SalesOrderHeader AS soh ON sp . BusinessEntityID = soh . SalesPersonID INNER JOIN Sales . SalesOrderDetail AS sd ON sd . SalesOrderID = soh . SalesOrderID INNER JOIN Production . Product AS pp ON sd . ProductID = pp . ProductID INNER JOIN Production . ProductSubcategory AS pps ON pp . ProductSubcategoryID = pps . ProductSubcategoryID INNER JOIN Production . ProductCategory AS ppc ON ppc . ProductCategoryID = pps . ProductCategoryID GROUP BY ppc . Name , soh . OrderDate , soh . SalesOrderNumber , pps . Name , pp . Name , soh . SalesPersonID HAVING ppc . Name = 'Clothing' Click Refresh fields when ready. We have a Query Designer where the query can be created with visual aids. We will not use it, but it is available. Click OK to close the dialog.","title":"Configuring a data set"},{"location":"Lab-ReportingServices/Exercise-1/#table-report-5p","text":"Now that we have our connection to the database and the query that will supply the data, let us create a report. A report is basically data from the database displayed in a table or with diagrams. Open the Toolbox pane. You can do this from the View menu. From the Toolbox chose Table and draw a table on the big, empty and white canvas on the Design tab: Switch back to the Report Data pane and expand the AdventureWorksDataset: If the node is empty or cannot be opened, you need to re-open the data set properties using right click, then clicking the Refresh Fields button. Drag the Date field to the first column of the table. It should look like this: The [Date] in the second row shows the expression to evaluate, while \"Date\" in the first row is the literal header label - we can change it too. Similarly, add Order and Product to the second and third columns. Add Qty as well: drag it to the right side of the last column; the cursor icon will changed to + sign and a blue line at the end of the table will appear. This will add a new, fourth column. Add LineTotal similarly into the fifth column. The first report is almost ready. Let us check how it looks like using the Preview tab. Note, that it might take a while for it to open the first time. Will be faster the second time though! Verify that your Neptun code appears in the table content! (If not, you forgot a preparation step. Go back, and repeat the steps!) We can print, or export the report into various formats (e.g. Word, Excel, PDF). However, this report is not very pretty, e.g. the currency is not displayed and the Qty and date columns are not formatted, etc. Go back to Design tab, right click the [Date] expression and select Text Box Properties. Navigate to the Number page, then select the Date category and chose a date format you like. Right click [LineTotal] , use Text Box Properties again and select the Currency option in Number . By moving the mouse over the gray boxes at the top of the table header the cursor changes to resize mode. (Just like you would resize a table in Word.) Use this to resize the entire table and the columns ( Qty and Line Total can be narrower, while the others might need more space). Finally, emphasize the header row. To do this, select the whole row (by clicking the gray rectangle on the the left end of the row) and click Bold on the ribbon. If you check preview, it should look like this: SUBMISSION If you are continuing with the next exercise, you may omit creating the screenshot here. Create a screenshot of the report preview page. Save the screenshot as f1.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible!","title":"Table report (5p)"},{"location":"Lab-ReportingServices/Exercise-1/#grouping-and-total-value-5p","text":"The report we created is very long and it contains everything without structure. These are retail sales information: the amount of product sold each day. Let us group the data. Go back to Design tab. Make sure that we see the Row Groups pane below the table. If it is not there, right click the design area and select Grouping in the View menu. Drag the Date field from Report Data to the Row Groups pane above the (Details) row. The table will look like this: Drag field Order into Row Groups between Date and (Details) . Now there are duplicate columns in the table. Let us delete these. Select the rightmost Date and Order columns by clicking on the gray boxes above them. Delete them by right click and Delete Columns . Unfortunately, the format of the new Date column is now lost, but you can set it again as previously. Check the Preview now, and see that the table is now ordered and grouped as we specified it. Go back to the Design view. Right click the [LineTotal] cell and click Add Total . This will add a total for each Order (which we used for grouping). There will be no label added to this line. Add one by left clicking the cell and typing: \"Order Total\" Holding the CTRL key pressed down click Order Total and the two cells to the right to select them all, then set a background color by choosing one from the Format menu. Check the preview of the report now. Let us create a daily total as well! Go back to the Design view. Right click on the [Order] cell and click Add Total > After . A new cell (Total) appears below [Order] . Click in it and change the label to \"Daily Total\u201d. Select the cell and the three right next to it (e.g. by using CTRL and clicking them) and change their background color ( Format > Background color ). Since there are quire a few orders per day, you may need to scroll down 4-5 pages in order to check the result in the preview: SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f1.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview including the lines showing the totals (a turn a few pages if needed to see one). Verify that your Neptun code is visible!","title":"Grouping and total value (5p)"},{"location":"Lab-ReportingServices/Exercise-2/","text":"Exercise 2: Visualization \u00b6 This exercise is to be completed individually for 5 points. The table report shows all sales. That is not useful to get a quick overview. A diagram would be more useful. Create a diagram that displays the sales per category. Inserting a diagram \u00b6 Switch to Design tab and drag a Chart from the Toolbox to the canvas to the right side of the table. You might have to wait a while for the diagram wizard to open. Choose a column diagram. Drag LineTotal from the Report Data pane to the diagram. Do not release the left mouse button. A window will appear beside the diagram. The window is titled Chart Data . Go to the the \"\u2211values\" field with your mouse. Release the left mouse button now. This makes the totals be displayed on the vertical axis. Next drag Subcat field into Category Groups and Date into Series Groups . The horizontal axis displays the categories, and we get separate columns per date series. Right click label [Date] and select Series Groups Properties . Click on the fx button in Group Expressions . The the following expression: =Year(Fields!Date.Value) This will produce yearly breakdown per category. Press OK in both windows. Before checking the Preview , increase the height of the chart, otherwise the labels at the bottom will remain hidden: Check the preview now: it shows the sales per category for each year separately. Format the diagram \u00b6 There are few changes to make. Click Chart title and replace the title: \"Revenue by category NEPTUN\" with your own Neptun code . Right click <<Expr>> in Series Groups and choose Series Groups Properties . Click on the fx button next to Label . Type: =Year(Fields!Date.Value) . Now the label will be the year part of the date. Right click the vertical axis and select Vertical Axis Properties . Select Currency from the Number group and fill out as previously: Check the preview now: the diagram will look much better (and also has your Neptun code): SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f2.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!","title":"Exercise 2: Visualization"},{"location":"Lab-ReportingServices/Exercise-2/#exercise-2-visualization","text":"This exercise is to be completed individually for 5 points. The table report shows all sales. That is not useful to get a quick overview. A diagram would be more useful. Create a diagram that displays the sales per category.","title":"Exercise 2: Visualization"},{"location":"Lab-ReportingServices/Exercise-2/#inserting-a-diagram","text":"Switch to Design tab and drag a Chart from the Toolbox to the canvas to the right side of the table. You might have to wait a while for the diagram wizard to open. Choose a column diagram. Drag LineTotal from the Report Data pane to the diagram. Do not release the left mouse button. A window will appear beside the diagram. The window is titled Chart Data . Go to the the \"\u2211values\" field with your mouse. Release the left mouse button now. This makes the totals be displayed on the vertical axis. Next drag Subcat field into Category Groups and Date into Series Groups . The horizontal axis displays the categories, and we get separate columns per date series. Right click label [Date] and select Series Groups Properties . Click on the fx button in Group Expressions . The the following expression: =Year(Fields!Date.Value) This will produce yearly breakdown per category. Press OK in both windows. Before checking the Preview , increase the height of the chart, otherwise the labels at the bottom will remain hidden: Check the preview now: it shows the sales per category for each year separately.","title":"Inserting a diagram"},{"location":"Lab-ReportingServices/Exercise-2/#format-the-diagram","text":"There are few changes to make. Click Chart title and replace the title: \"Revenue by category NEPTUN\" with your own Neptun code . Right click <<Expr>> in Series Groups and choose Series Groups Properties . Click on the fx button next to Label . Type: =Year(Fields!Date.Value) . Now the label will be the year part of the date. Right click the vertical axis and select Vertical Axis Properties . Select Currency from the Number group and fill out as previously: Check the preview now: the diagram will look much better (and also has your Neptun code): SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f2.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!","title":"Format the diagram"},{"location":"Lab-ReportingServices/Exercise-3/","text":"Exercise 3: Sales personnel report \u00b6 This exercise is to be completed individually for 5 points. Let us create a new report about the effectiveness of the sales personnel. Extending the data set \u00b6 The dataset we created in the Report Data panel has to be extended with further information. Open the data set properties by right clicking on AdventureWorksDataSet in the Report Data pane, click Dataset properties then change the SQL command to: SELECT soh . OrderDate AS [ Date ], soh . SalesOrderNumber AS [ Order ], pps . Name AS Subcat , pp . Name as Product , SUM ( sd . OrderQty ) AS Qty , SUM ( sd . LineTotal ) AS LineTotal , CONCAT ( pepe . FirstName , ' ' , pepe . LastName ) AS SalesPersonName FROM Sales . SalesPerson sp INNER JOIN Person . Person as pepe ON sp . BusinessEntityID = pepe . BusinessEntityID INNER JOIN Sales . SalesOrderHeader AS soh ON sp . BusinessEntityID = soh . SalesPersonID INNER JOIN Sales . SalesOrderDetail AS sd ON sd . SalesOrderID = soh . SalesOrderID INNER JOIN Production . Product AS pp ON sd . ProductID = pp . ProductID INNER JOIN Production . ProductSubcategory AS pps ON pp . ProductSubcategoryID = pps . ProductSubcategoryID INNER JOIN Production . ProductCategory AS ppc ON ppc . ProductCategoryID = pps . ProductCategoryID GROUP BY ppc . Name , soh . OrderDate , soh . SalesOrderNumber , pps . Name , pp . Name , soh . SalesPersonID , pepe . FirstName , pepe . LastName HAVING ppc . Name = 'Clothing' Don\u2019t forget to press Refresh fields before closing the dialog. Close the dialog. In the Report data expand AdventureWorksDataset (if already expanded, close then re-expand). A new field SalesPersonName will appear. Right click the data source AdventureWorks2014 and choose Convert to shared Data Source , and then repeat this with the AdventureWorksDataSet too. These will enable us to use them in a new report. New report and data sources \u00b6 We will use the converted and shared data source and data set in a new report. In the Solution Explorer right click Reports and chose Add > New Item > Report . The name of this new report should be \"Sales People\". Open the new report. There are no data sources associated with the report. Use the Report Data pane to add the existing one: Right click Data Source and choose Add Data Source Click the Use shared data source reference option and select \"AdventureWorks2014\". Right lick Datasets > Add Dataset Click Use a shared dataset and select the existing AdventureWorksDataset Contents of the report \u00b6 Create a tabular report containing the sales persons and their activity. Group by product category and sales person. Add a total line for each person. Make sure to set appropriate formatting of numbers. The key is creating the table and grouping as below. The category is the field Subcat . The final report should look like this: Tip You should use the Add total > After just like before. But you should do this by clicking on [Subcat] and not [SalesPersonName] ! (If you click SalesPersonName to add the total, it will be a \"grand total\" adding up all persons.) SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f3.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the table!","title":"Exercise 3: Sales personnel report"},{"location":"Lab-ReportingServices/Exercise-3/#exercise-3-sales-personnel-report","text":"This exercise is to be completed individually for 5 points. Let us create a new report about the effectiveness of the sales personnel.","title":"Exercise 3: Sales personnel report"},{"location":"Lab-ReportingServices/Exercise-3/#extending-the-data-set","text":"The dataset we created in the Report Data panel has to be extended with further information. Open the data set properties by right clicking on AdventureWorksDataSet in the Report Data pane, click Dataset properties then change the SQL command to: SELECT soh . OrderDate AS [ Date ], soh . SalesOrderNumber AS [ Order ], pps . Name AS Subcat , pp . Name as Product , SUM ( sd . OrderQty ) AS Qty , SUM ( sd . LineTotal ) AS LineTotal , CONCAT ( pepe . FirstName , ' ' , pepe . LastName ) AS SalesPersonName FROM Sales . SalesPerson sp INNER JOIN Person . Person as pepe ON sp . BusinessEntityID = pepe . BusinessEntityID INNER JOIN Sales . SalesOrderHeader AS soh ON sp . BusinessEntityID = soh . SalesPersonID INNER JOIN Sales . SalesOrderDetail AS sd ON sd . SalesOrderID = soh . SalesOrderID INNER JOIN Production . Product AS pp ON sd . ProductID = pp . ProductID INNER JOIN Production . ProductSubcategory AS pps ON pp . ProductSubcategoryID = pps . ProductSubcategoryID INNER JOIN Production . ProductCategory AS ppc ON ppc . ProductCategoryID = pps . ProductCategoryID GROUP BY ppc . Name , soh . OrderDate , soh . SalesOrderNumber , pps . Name , pp . Name , soh . SalesPersonID , pepe . FirstName , pepe . LastName HAVING ppc . Name = 'Clothing' Don\u2019t forget to press Refresh fields before closing the dialog. Close the dialog. In the Report data expand AdventureWorksDataset (if already expanded, close then re-expand). A new field SalesPersonName will appear. Right click the data source AdventureWorks2014 and choose Convert to shared Data Source , and then repeat this with the AdventureWorksDataSet too. These will enable us to use them in a new report.","title":"Extending the data set"},{"location":"Lab-ReportingServices/Exercise-3/#new-report-and-data-sources","text":"We will use the converted and shared data source and data set in a new report. In the Solution Explorer right click Reports and chose Add > New Item > Report . The name of this new report should be \"Sales People\". Open the new report. There are no data sources associated with the report. Use the Report Data pane to add the existing one: Right click Data Source and choose Add Data Source Click the Use shared data source reference option and select \"AdventureWorks2014\". Right lick Datasets > Add Dataset Click Use a shared dataset and select the existing AdventureWorksDataset","title":"New report and data sources"},{"location":"Lab-ReportingServices/Exercise-3/#contents-of-the-report","text":"Create a tabular report containing the sales persons and their activity. Group by product category and sales person. Add a total line for each person. Make sure to set appropriate formatting of numbers. The key is creating the table and grouping as below. The category is the field Subcat . The final report should look like this: Tip You should use the Add total > After just like before. But you should do this by clicking on [Subcat] and not [SalesPersonName] ! (If you click SalesPersonName to add the total, it will be a \"grand total\" adding up all persons.) SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f3.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the table!","title":"Contents of the report"},{"location":"Lab-ReportingServices/Exercise-4/","text":"Exercise 4: Optional exercise \u00b6 You can earn and additional +3 points with the completion of this exercise. Create a pie chart to compare the performance of the sales persons according to the total value of purchases achieved by them! Put your Neptun code into the pie chart title! The goal is to get a diagram similar to the one below. Tip The pie chart is similar to the column diagram. The \u2211 Values should be the LineTotal and Category Groups is the SalesPersonName . ( Series Groups will remain empty this time.) Make sure that the legend shows the names. You might need to adjust the size of the diagram to have enough space. SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f4.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!","title":"Exercise 4: Optional exercise"},{"location":"Lab-ReportingServices/Exercise-4/#exercise-4-optional-exercise","text":"You can earn and additional +3 points with the completion of this exercise. Create a pie chart to compare the performance of the sales persons according to the total value of purchases achieved by them! Put your Neptun code into the pie chart title! The goal is to get a diagram similar to the one below. Tip The pie chart is similar to the column diagram. The \u2211 Values should be the LineTotal and Category Groups is the SalesPersonName . ( Series Groups will remain empty this time.) Make sure that the legend shows the names. You might need to adjust the size of the diagram to have enough space. SUBMISSION Create a screenshot of the report preview page. Save the screenshot as f4.png and submit with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!","title":"Exercise 4: Optional exercise"}]}